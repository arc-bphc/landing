{"pageProps":{"posts":[{"title":"LED Matrix","published":"2021-12-05T00:00:00.000Z","summary":"Create a music waveform visualiser using a Pixel Matrix. We use Fast Fourier Transforms, simple micro-controllers and basic hardware components.","tags":["arduino","neopixel","audio"],"body":{"raw":"\n## Table of Contents\n\n## Fast Fourier Transform(FFT)\n\nFFT is based on the principle that any signal(periodic or not) can be reconstructed by adding sinusoidal waves of different frequencies and amplitudes. Now FFT does this in reverse, where it splits an already existing wave into sinusoidal signals i.e the frequencies the wave contains.\n\n<Image\n  src='/static/images/blog/led-matrix/1.png'\n  alt='1'\n  width='auto'\n  height='auto'\n/>\n\n<Image\n  src='/static/images/blog/led-matrix/2.png'\n  alt='2'\n  width='auto'\n  height='auto'\n/>\n\nThus, we make use of FFT to identify which frequencies are present in any analog signal and also see which of those frequencies are the most dominating.\nComing to applying FFT to our audio visualiser, when we feed in an audio signal into an FFT we can find out the relative strengths of the frequencies.\n\nNow let’s take a look at how FFT is applied.\n\n## Sampling Frequency and Nyquist Theorem\n\nSampling frequency is the number of times we sample the wave per second.\n\nThe Nyquist-Shannon Sampling Theorem tells us that to be able to sample a signal, the sampling frequency needs to be at least twice the frequency of the signal we’re trying to sample.\nIn other words, the FFT will only be able to detect frequencies up to half the sampling frequency.\n\nTo explain how this works let’s use an example:\n\nSay we want to sample an audio signal 10,000 times per second, i.e.\n**Sampling frequency =10,000Hz.**\n\n- Now we want to see how many samples we can record from a wave of a certain frequency.\n  If we take a 2kHz wave, the number of samples we get is 10,000/2000=5 samples per wave.\n  Thus for a wave of this frequency, 5 samples per wave is good enough to recreate the wave.\n- Now if we consider a wave of frequency 5kHz, we see that we only get 2 samples per wave.\n- Furthermore, if we take a wave of frequency 10kHz we see that we only get 1 sample per wave, and the signal can no longer be reconstructed as it results in a straight line.\n- Thus this is where the Nyquist theorem comes in and says that the maximum frequency we are able to sample is half of the sampling frequency.\n\n<Image\n  src='/static/images/blog/led-matrix/3.png'\n  alt='3'\n  width='auto'\n  height='auto'\n/>\n\n## Number of Samples\n\nThe FFT algorithm works with a finite number of samples. This number needs to be 2n where n is an integer (resulting in 32, 64, 128, etc). The larger this number is, the slower the algorithm will be. However, with many samples, you will get a larger resolution for the results.\n\n<Image\n  src='/static/images/blog/led-matrix/4.png'\n  alt='4'\n  width='auto'\n  height='auto'\n/>\n\n## Implementation:\n\nWe can implement FFT into our projects conveniently using the arduinoFFT.h library, the documentation for which can be found online.\narduinoFFT - Arduino Reference\n\n## Results of FFT:\n\nAfter we have achieved the results of FFT, we now have to understand them.\nLet’s say we used 16 samples and a sampling rate of 40kHz\n\nSince we use 16 samples we get 16 bins.\n\nThe term bins is related to the result of the FFT, where every element in the result array is a bin. One can say this is the “resolution” of the FFT. Every bin represents a frequency interval, just like a histogram. The number of bins you get to use is half the amount of samples spanning the frequency range from zero to half the sampling rate as the other half of the values are negative and meaningless.\n\nIn practicality, we can’t use the first bin either as this is swapped by DC. SO we only get to use 7 bins in the end for this case.\n\nWe can now map the bins as we wish to the number of bands we require.\nFor an audio signal, all the interesting stuff is towards the low end.\nTo help us do the calculations in mapping the bins to the bands, we can make use of the following spreadsheet. ( Courtesy: Scott Marley)\n\nhttps://github.com/s-marley/ESP32_FFT_VU/blob/master/FFT.xlsx\n\n### Implementation:\n\nWe can implement FFT into our projects conveniently using the arduinoFFT.h library, the documentation for which can be found online.\narduinoFFT - Arduino Reference\nResults of FFT:\nAfter we have achieved the results of FFT, we now have to understand them.\nLet’s say we used 16 samples and a sampling rate of 40kHz.\nSince we use 16 samples we get 16 bins.\nThe term bins is related to the result of the FFT, where every element in the result array is a bin. One can say this is the “resolution” of the FFT. Every bin represents a frequency interval, just like a histogram. The number of bins you get to use is half the amount of samples spanning the frequency range from zero to half the sampling rate as the other half of the values are negative and meaningless.\nIn practicality, we can’t use the first bin either as this is swapped by DC. SO we only get to use 7 bins in the end for this case.\nWe can now map the bins as we wish to the number of bands we require.\nFor an audio signal, all the interesting stuff is towards the low end. To help us do the calculations in mapping the bins to the bands, we can make use of the following spreadsheet.\n\nNow that we have understood the theory we can apply it to our code.\n\n## FastLED in a nutshell\n\nFastLED is a fast, efficient, easy-to-use Arduino library for programming addressable LED strips and pixels such as WS2810, WS2811,\nLPD8806, Neopixel and more. In this project we have used WS2812B LED strip. The first step is to include the library and define constants.\n\n```C\n#include <FastLED.h>\ndefine NUM_LEDS 64 // number of leds in the matrix\ndefine DATA_PIN 4\nNext, we set up an array to store the LED data.\n\nCRGB leds[NUM_LEDS]\n```\n\nThen, we setup the LEDs.\n\n```\nvoid setup() {\n    FastLED.addLeds(WS2812B, DATA_PIN)(leds, NUM_LEDS);\n}\n```\n\n### Writing to an LED\n\n```C\nvoid loop(){\n    leds[0] = CRGB::Red;\n    FastLED.show();\n    delay(50);\n}\n```\n\nThis will set the first led to red. To make it blink, we can change the code to this\n\n```\nvoid loop() {\n    leds[0] = CRGB::Red; FastLED.show();\n    delay(500);\n    leds[0] = CRGB::Black;\n    FastLED.show();\n    delay(500);\n}\n```\n\n**For writing to multiple LEDS, we can use loops.**\n\n```C\nvoid loop(){ for(int i=0; i<NUM_LEDS; i++){ leds[i] = CRGB::Red;\nFastLED.show(); delay(50); } }\n```\n\nYou can also display various patterns using FastLED.\nFor more details, refer:\n\n## Resources:\n\nScott Marley's [github](https://github.com/s-marley) is an amazing resource for all things FastLED. He also has a [youtube channel](https://www.youtube.com/c/ScottMarley/playlists) explaining his projects.\n\n## Testing:\n","code":"var Component=(()=>{var c=Object.create;var l=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var r=s=>l(s,\"__esModule\",{value:!0});var f=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),g=(s,e)=>{r(s);for(var a in e)l(s,a,{get:e[a],enumerable:!0})},w=(s,e,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!p.call(s,i)&&i!==\"default\"&&l(s,i,{get:()=>e[i],enumerable:!(a=d(e,i))||a.enumerable});return s},b=s=>w(r(l(s!=null?c(u(s)):{},\"default\",s&&s.__esModule&&\"default\"in s?{get:()=>s.default,enumerable:!0}:{value:s,enumerable:!0})),s);var o=f((j,h)=>{h.exports=_jsx_runtime});var N={};g(N,{default:()=>F});var n=b(o());function y(s={}){let e=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",ol:\"ol\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",h3:\"h3\",pre:\"pre\",code:\"code\"},s.components),{Image:a,wrapper:i}=e,t=(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.h2,{id:\"table-of-contents\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#table-of-contents\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Table of Contents\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#fast-fourier-transformfft\",children:\"Fast Fourier Transform(FFT)\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#sampling-frequency-and-nyquist-theorem\",children:\"Sampling Frequency and Nyquist Theorem\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#number-of-samples\",children:\"Number of Samples\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#implementation\",children:\"Implementation:\"})}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"#results-of-fft\",children:\"Results of FFT:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#implementation-1\",children:\"Implementation:\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"#fastled-in-a-nutshell\",children:\"FastLED in a nutshell\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#writing-to-an-led\",children:\"Writing to an LED\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#resources\",children:\"Resources:\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"#testing\",children:\"Testing:\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"fast-fourier-transformfft\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#fast-fourier-transformfft\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Fast Fourier Transform(FFT)\"]}),`\n`,(0,n.jsx)(e.p,{children:\"FFT is based on the principle that any signal(periodic or not) can be reconstructed by adding sinusoidal waves of different frequencies and amplitudes. Now FFT does this in reverse, where it splits an already existing wave into sinusoidal signals i.e the frequencies the wave contains.\"}),`\n`,(0,n.jsx)(a,{src:\"/static/images/blog/led-matrix/1.png\",alt:\"1\",width:\"auto\",height:\"auto\"}),`\n`,(0,n.jsx)(a,{src:\"/static/images/blog/led-matrix/2.png\",alt:\"2\",width:\"auto\",height:\"auto\"}),`\n`,(0,n.jsx)(e.p,{children:`Thus, we make use of FFT to identify which frequencies are present in any analog signal and also see which of those frequencies are the most dominating.\nComing to applying FFT to our audio visualiser, when we feed in an audio signal into an FFT we can find out the relative strengths of the frequencies.`}),`\n`,(0,n.jsx)(e.p,{children:\"Now let\\u2019s take a look at how FFT is applied.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"sampling-frequency-and-nyquist-theorem\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#sampling-frequency-and-nyquist-theorem\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Sampling Frequency and Nyquist Theorem\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Sampling frequency is the number of times we sample the wave per second.\"}),`\n`,(0,n.jsx)(e.p,{children:`The Nyquist-Shannon Sampling Theorem tells us that to be able to sample a signal, the sampling frequency needs to be at least twice the frequency of the signal we\\u2019re trying to sample.\nIn other words, the FFT will only be able to detect frequencies up to half the sampling frequency.`}),`\n`,(0,n.jsx)(e.p,{children:\"To explain how this works let\\u2019s use an example:\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Say we want to sample an audio signal 10,000 times per second, i.e.\n`,(0,n.jsx)(e.strong,{children:\"Sampling frequency =10,000Hz.\"})]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:`Now we want to see how many samples we can record from a wave of a certain frequency.\nIf we take a 2kHz wave, the number of samples we get is 10,000/2000=5 samples per wave.\nThus for a wave of this frequency, 5 samples per wave is good enough to recreate the wave.`}),`\n`,(0,n.jsx)(e.li,{children:\"Now if we consider a wave of frequency 5kHz, we see that we only get 2 samples per wave.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Furthermore, if we take a wave of frequency 10kHz we see that we only get 1 sample per wave, and the signal can no longer be reconstructed as it results in a straight line.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Thus this is where the Nyquist theorem comes in and says that the maximum frequency we are able to sample is half of the sampling frequency.\"}),`\n`]}),`\n`,(0,n.jsx)(a,{src:\"/static/images/blog/led-matrix/3.png\",alt:\"3\",width:\"auto\",height:\"auto\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"number-of-samples\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#number-of-samples\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Number of Samples\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The FFT algorithm works with a finite number of samples. This number needs to be 2n where n is an integer (resulting in 32, 64, 128, etc). The larger this number is, the slower the algorithm will be. However, with many samples, you will get a larger resolution for the results.\"}),`\n`,(0,n.jsx)(a,{src:\"/static/images/blog/led-matrix/4.png\",alt:\"4\",width:\"auto\",height:\"auto\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"implementation\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#implementation\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Implementation:\"]}),`\n`,(0,n.jsx)(e.p,{children:`We can implement FFT into our projects conveniently using the arduinoFFT.h library, the documentation for which can be found online.\narduinoFFT - Arduino Reference`}),`\n`,(0,n.jsxs)(e.h2,{id:\"results-of-fft\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#results-of-fft\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Results of FFT:\"]}),`\n`,(0,n.jsx)(e.p,{children:`After we have achieved the results of FFT, we now have to understand them.\nLet\\u2019s say we used 16 samples and a sampling rate of 40kHz`}),`\n`,(0,n.jsx)(e.p,{children:\"Since we use 16 samples we get 16 bins.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The term bins is related to the result of the FFT, where every element in the result array is a bin. One can say this is the \\u201Cresolution\\u201D of the FFT. Every bin represents a frequency interval, just like a histogram. The number of bins you get to use is half the amount of samples spanning the frequency range from zero to half the sampling rate as the other half of the values are negative and meaningless.\"}),`\n`,(0,n.jsx)(e.p,{children:\"In practicality, we can\\u2019t use the first bin either as this is swapped by DC. SO we only get to use 7 bins in the end for this case.\"}),`\n`,(0,n.jsx)(e.p,{children:`We can now map the bins as we wish to the number of bands we require.\nFor an audio signal, all the interesting stuff is towards the low end.\nTo help us do the calculations in mapping the bins to the bands, we can make use of the following spreadsheet. ( Courtesy: Scott Marley)`}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/s-marley/ESP32_FFT_VU/blob/master/FFT.xlsx\",children:\"https://github.com/s-marley/ESP32_FFT_VU/blob/master/FFT.xlsx\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"implementation-1\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#implementation-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Implementation:\"]}),`\n`,(0,n.jsx)(e.p,{children:`We can implement FFT into our projects conveniently using the arduinoFFT.h library, the documentation for which can be found online.\narduinoFFT - Arduino Reference\nResults of FFT:\nAfter we have achieved the results of FFT, we now have to understand them.\nLet\\u2019s say we used 16 samples and a sampling rate of 40kHz.\nSince we use 16 samples we get 16 bins.\nThe term bins is related to the result of the FFT, where every element in the result array is a bin. One can say this is the \\u201Cresolution\\u201D of the FFT. Every bin represents a frequency interval, just like a histogram. The number of bins you get to use is half the amount of samples spanning the frequency range from zero to half the sampling rate as the other half of the values are negative and meaningless.\nIn practicality, we can\\u2019t use the first bin either as this is swapped by DC. SO we only get to use 7 bins in the end for this case.\nWe can now map the bins as we wish to the number of bands we require.\nFor an audio signal, all the interesting stuff is towards the low end. To help us do the calculations in mapping the bins to the bands, we can make use of the following spreadsheet.`}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we have understood the theory we can apply it to our code.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"fastled-in-a-nutshell\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#fastled-in-a-nutshell\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"FastLED in a nutshell\"]}),`\n`,(0,n.jsx)(e.p,{children:`FastLED is a fast, efficient, easy-to-use Arduino library for programming addressable LED strips and pixels such as WS2810, WS2811,\nLPD8806, Neopixel and more. In this project we have used WS2812B LED strip. The first step is to include the library and define constants.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-C\",children:[(0,n.jsxs)(e.span,{className:\"hljs-meta\",children:[\"#\",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"include\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"<FastLED.h>\"})]}),`\ndefine NUM_LEDS `,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"64\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// number of leds in the matrix\"}),`\ndefine DATA_PIN `,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"4\"}),`\nNext, we `,(0,n.jsx)(e.span,{className:\"hljs-built_in\",children:\"set\"}),\" up an \",(0,n.jsx)(e.span,{className:\"hljs-built_in\",children:\"array\"}),` to store the LED data.\n\nCRGB leds[NUM_LEDS]\n`]})}),`\n`,(0,n.jsx)(e.p,{children:\"Then, we setup the LEDs.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-scss\",children:[\"void \",(0,n.jsx)(e.span,{className:\"hljs-built_in\",children:\"setup\"}),`() {\n    FastLED`,(0,n.jsx)(e.span,{className:\"hljs-selector-class\",children:\".addLeds\"}),`(WS2812B, DATA_PIN)(leds, NUM_LEDS);\n}\n`]})}),`\n`,(0,n.jsxs)(e.h3,{id:\"writing-to-an-led\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#writing-to-an-led\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Writing to an LED\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-C\",children:[(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"void\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title hljs-function\",children:\"loop\"}),(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"()\"}),`{\n    leds[`,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0\"}),`] = CRGB::Red;\n    FastLED.show();\n    delay(`,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"50\"}),`);\n}\n`]})}),`\n`,(0,n.jsx)(e.p,{children:\"This will set the first led to red. To make it blink, we can change the code to this\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-scss\",children:[\"void \",(0,n.jsx)(e.span,{className:\"hljs-built_in\",children:\"loop\"}),`() {\n    leds`,(0,n.jsx)(e.span,{className:\"hljs-selector-attr\",children:\"[0]\"}),\" = CRGB::Red; FastLED\",(0,n.jsx)(e.span,{className:\"hljs-selector-class\",children:\".show\"}),`();\n    `,(0,n.jsx)(e.span,{className:\"hljs-built_in\",children:\"delay\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"500\"}),`);\n    leds`,(0,n.jsx)(e.span,{className:\"hljs-selector-attr\",children:\"[0]\"}),` = CRGB::Black;\n    FastLED`,(0,n.jsx)(e.span,{className:\"hljs-selector-class\",children:\".show\"}),`();\n    `,(0,n.jsx)(e.span,{className:\"hljs-built_in\",children:\"delay\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"500\"}),`);\n}\n`]})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"For writing to multiple LEDS, we can use loops.\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-C\",children:[(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"void\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title hljs-function\",children:\"loop\"}),(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"()\"}),\"{ \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"for\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-type\",children:\"int\"}),\" i=\",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0\"}),`; i<NUM_LEDS; i++){ leds[i] = CRGB::Red;\nFastLED.show(); delay(`,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"50\"}),`); } }\n`]})}),`\n`,(0,n.jsx)(e.p,{children:`You can also display various patterns using FastLED.\nFor more details, refer:`}),`\n`,(0,n.jsxs)(e.h2,{id:\"resources\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#resources\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Resources:\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Scott Marley's \",(0,n.jsx)(e.a,{href:\"https://github.com/s-marley\",children:\"github\"}),\" is an amazing resource for all things FastLED. He also has a \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/c/ScottMarley/playlists\",children:\"youtube channel\"}),\" explaining his projects.\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"testing\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#testing\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Testing:\"]})]});return i?(0,n.jsx)(i,Object.assign({},s,{children:t})):t}var F=y;return N;})();\n;return Component.default;"},"_id":"blog/led-matrix.mdx","_raw":{"sourceFilePath":"blog/led-matrix.mdx","sourceFileName":"led-matrix.mdx","sourceFileDir":"blog","bodyType":"mdx","flattenedPath":"blog/led-matrix"},"type":"Blog","readingTime":{"text":"6 min read","minutes":5.445,"time":326700,"words":1089},"slug":"led-matrix"},{"title":"ROS TF 101","published":"2021-05-04T00:00:00.000Z","summary":"Learn how to use TF, the transforms framework avaiable in ROS. A step-by-step guide to use TF with rospy","tags":["Tutorials","ROS"],"body":{"raw":"\n## Table of Contents\n\nA transform specifies how data expressed in a frame can be transformed into a different frame. For instance, if you detect an obstacle with the laser at 3 cm in the front, this means that it is 3 cm from the laser, but not from the center of the robot (that is usually called the /base_link). To know the distance from the center of the robot, you need to transform the 3 cm from the /laser_frame to the /base_link frame (which is actually what the Path Planning system needs to know, what is the distance from the center of the robot to the obstacle).\n\nFirst, we'll define two frames (coordinate frames), one at the center of the laser and another one at the center of the robot. Usually, the center of the robot is placed at the rotational center of the robot. We'll name the laser frame as base_laser and the robot frame as base_link.\n\nNow, we need to define a relationship (in terms of position and orientation) between the base_laser and the base_link. For instance, we know that the base_laser frame is at a distance of 20 cm in the y axis and 10 cm in the x axis referring the base_link frame. Then we'll have to provide this relationship to the robot. This relationship between the position of the laser and the base of the robot is known in ROS as the TRANSFORM between the laser and the robot.\n\n## Visulization of TF\n\n### View_frames\n\nThe view_frames ROS node generates a diagram with the current TF tree of the system.\n\n`rosrun tf view_frames`\n\n### rqt_tf_tree\n\nrqt_tf_tree gives the same functionality as the view_frames, with an interesting extra: you can refresh and see changes without having to generate another PDF file each time.\n\n`rosrun rqt_tf_tree rqt_tf_tree`\n\n### Using echo /tf\n\nThere is a topic named /tf where all the TFs are published. The only problem is that ALL of them are published. In simple systems like this one, that isn't a problem; but in massive systems, the quantity of data can be overwhelming. Therefore, the tf package gives a handy tool that filters which transform you are interested in and just shows you that one.\n\n`rostopic echo -n1 /tf`\n\n### Using tf_echo\n\nThe /tf topic only publishes the direct TFs, not all the transforms between all the frames. tf_echo does return the transforms between any connected frames to you.\n\n`rosrun tf tf_echo [reference_frame] [target_frame]`\n\n## TF Publisher, Broadcaster, Listener, Subscriber\n\n### TF Publisher\n\n```python\n#!/usr/bin/env python\n\nimport rospy\nimport tf2_ros\nfrom tf2_msgs.msg import TFMessage\nfrom geometry_msgs.msg import TransformStamped\n\n\nrospy.init_node('fixed_tf2_broadcaster')\n\npub_tf = rospy.Publisher(\"/tf\",TFMessage, queue_size=1)\nmessage = TFMessage()\n\nwhile not rospy.is_shutdown():\n     # Run this loop at about 10Hz\n    rospy.sleep(0.1)\n\n    t1 = TransformStamped()\n    t1.header.frame_id = \"turtle1\"\n    t1.header.stamp = rospy.Time.now()\n    t1.child_frame_id = \"carrot1\"\n    t1.transform.translation.x = 0.0\n    t1.transform.translation.y = 2.0\n    t1.transform.translation.z = 0.0\n\n    t1.transform.rotation.x = 0.0\n    t1.transform.rotation.y = 0.0\n    t1.transform.rotation.z = 0.0\n    t1.transform.rotation.w = 1.0\n\n    t2 = TransformStamped()\n    t2.header.frame_id = \"turtle1\"\n    t2.header.stamp = rospy.Time.now()\n    t2.child_frame_id = \"carrot2\"\n    t2.transform.translation.x = 0.0\n    t2.transform.translation.y = 4.0\n    t2.transform.translation.z = 0.0\n\n    t2.transform.rotation.x = 0.0\n    t2.transform.rotation.y = 0.0\n    t2.transform.rotation.z = 0.0\n    t2.transform.rotation.w = 1.0\n\n    message = [t1,t2]\n    pub_tf.publish(message)\n\nrospy.spin()\n```\n\n### TF Broadcaster Example - 1\n\n```python\ndef handle_turtle_pose(pose_msg, robot_name):\n    br = tf2_ros.TransformBroadcaster()\n\n    br.sendTransform((pose_msg.position.x,pose_msg.position.y,pose_msg.position.z),\n                     (pose_msg.orientation.x,pose_msg.orientation.y,pose_msg.orientation.z,pose_msg.orientation.w),\n                     rospy.Time.now(),\n                     robot_name,\n                     \"/world\")\n```\n\nYou have to publish each element of the position and orientation inside a parenthesis, otherwise it might not work.There is also a very important element, which is the rospy.Time.now(). This is because TF really depends on time to make everything work and be able to play with past messages. Then, state the name of the child-frame you want to assign that model (robot_name) and the parent-frame, which, in this case, is /world.\n\n### TF Broadcaster Example - 2\n\n```python\n#!/usr/bin/env python\n\nimport rospy\nimport tf\nimport math\n\nif __name__ == '__main__':\n    rospy.init_node('my_moving_carrot_tf_broadcaster')\n    br = tf.TransformBroadcaster()\n    rate = rospy.Rate(5.0)\n    turning_speed_rate = 0.1\n    while not rospy.is_shutdown():\n        t = (rospy.Time.now().to_sec() * math.pi)*turning_speed_rate\n        # Map to only one turn maximum [0,2*pi)\n        rad_var = t % (2*math.pi)\n        br.sendTransform((1.0 * math.sin(rad_var), 1.0 * math.cos(rad_var), 0.0),\n                         (0.0, 0.0, 0.0, 1.0),\n                         rospy.Time.now(),\n                         \"moving_carrot\",\n                         \"turtle2\")\n        rate.sleep()\n```\n\n### TF Broadcaster from Pose for turtlesim_node\n\n**NOTE: Requires setting of ROS params in launch file as shown below**\n\n```xml\n<launch>\n    <!--To get the Pose from turtle bot we have to launch turtlesim_node-->\n    <node pkg=\"turtlesim\" type=\"turtlesim_node\" name=\"sim\"/>\n\n    <node name=\"turtle1_tf2_broadcaster\" pkg=\"learning_tf2\" type=\"turtle_tf2_broadcaster.py\" respawn=\"false\" output=\"screen\" >\n        <param name=\"turtle\" type=\"string\" value=\"turtle1\" />\n\n    </node>\n</launch>\n```\n\n```python\n#! /usr/bin/env python\n\nimport rospy\nfrom geometry_msgs.msg import TransformStamped\nfrom turtlesim.msg import Pose\nimport tf_conversions\nimport tf2_ros\n\ndef callback_function(pose):\n    global turtlename\n    br = tf2_ros.TransformBroadcaster()\n    t = TransformStamped()\n\n    t.header.stamp = rospy.Time.now()\n    t.header.frame_id = 'world'\n    t.child_frame_id = turtlename\n    t.transform.translation.x = pose.x\n    t.transform.translation.y = pose.y\n    t.transform.translation.z = 0\n\n    q = tf_conversions.transformations.quaternion_from_euler(0,0,pose.theta)\n    t.transform.rotation.x = q[0]\n    t.transform.rotation.y = q[1]\n    t.transform.rotation.z = q[2]\n    t.transform.rotation.w = q[3]\n\n    br.sendTransform(t)\n\n\nif __name__== '__main__':\n    rospy.init_node('tf2_broadcaster')\n    turtlename = rospy.get_param('~turtle')\n    rospy.Subscriber('/%s/pose'% turtlename,Pose,callback_function)\n\n    rospy.spin()\n```\n\n### TF Listener\n\n```python\n#!/usr/bin/env python\n\nimport rospy\nimport tf\nimport math\nimport tf2_ros\nfrom geometry_msgs.msg import Twist\n\nif __name__ == '__main__':\n    rospy.init_node('tf2_turtle_listener')\n\n    tfBuffer = tf2_ros.Buffer()\n    tf2_ros.TransformListener(tfBuffer)\n\n    turtle_name = \"turtle2\"\n\n    rate = rospy.Rate(10.0)\n    while not rospy.is_shutdown():\n        try:\n            trans = tfBuffer.lookup_transform(turtle_name, 'turtle1', rospy.Time())\n            #print(trans)\n        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):\n            rate.sleep()\n            continue\n\n        print(trans)\n        rate.sleep()\n```\n\n**NOTE: Using `rospy.Time.now()` in lookup_transform can cause errors. `rospy.Time.now()` > will ask for the frame with the current time, which might always not be avaiable immdeaditly. `rospy.Time()` > will ask for the latest frame that is available. To tackle this a time out argument can be given to the lookup_transform,**\n\n`trans = tfBuffer.lookup_transform(turtle_name, 'turtle1', rospy.Time.now(),rospy.Duration(1.0))`\n\n## Time Travel\n\nTo get the tranform between two objects from the past the following can be used.\n\n```python\ntry:\n    past = rospy.Time.now() - rospy.Duration(5.0)\n    trans = tfBuffer.lookup_transform(turtle_name, 'carrot1', past, rospy.Duration(1.0))\nexcept (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):\n```\n\nTo get transforms between objects from different timelines the following can be used.\n\n```python\ntry:\n    past = rospy.Time.now() - rospy.Duration(5.0)\n    trans = tfBuffer.lookup_transform_full(target_frame=turtle_name,target_time=rospy.Time.now(), source_frame='carrot1',source_time=past,fixed_frame='world',timeout=rospy.Duration(1.0))\n\nexcept(tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):\n```\n\n## robot_state_publisher\n\nPublishing all the TF's manually is very tedious and hence ROS provides nice tool called robot state publisher to automate the task for you. In essence, it takes a file describing the morphology of the robot (aka URDF file) as input and it automatically publishes the TF for you.\n\n```xml\n<launch>\n\n  <!-- Load the URDF file in the param server variable robot_description if it wasn't loaded before -->\n  <param name=\"robot_description\" command=\"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\"/>\n\n  <!-- Publish TF with robot_state_publisher -->\n  <node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" type=\"robot_state_publisher\"\n    respawn=\"false\" output=\"screen\">\n    <remap from=\"/joint_states\" to=\"/pi_robot/joint_states\" />\n  </node>\n\n</launch>\n```\n\n## joint_state_publisher\n\nThere are two ways to publish non-fixed joint frames\n\n### Publish them directly\n\n```xml\n<launch>\n  <param name=\"robot_description\" command=\"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" />\n\n  <!-- send fake joint values -->\n  <node name=\"joint_state_publisher\" pkg=\"joint_state_publisher\" type=\"joint_state_publisher\">\n    <param name=\"use_gui\" value=\"TRUE\"/>\n  </node>\n\n  <!-- Combine joint values -->\n  <node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" type=\"state_publisher\"/>\n\n  <!-- Show in RVIZ   -->\n  <node name=\"rviz\" pkg=\"rviz\" type=\"rviz\" args=\"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\"/>\n\n</launch>\n```\n\n**NOTE: This only works in RVIZ, meaning the robot in gazebo won't be effected by the joint state values.**\n\n### Publish them through Hardware/Simulation\n\n**Step 1: Define a joint that isn't fixed in your URDF File**\n\n```xml\n<joint name=\"left_shoulder_forward_joint\" type=\"revolute\">\n    <parent link=\"left_shoulder_link\"/>\n    <child link=\"left_shoulder_forward_link\"/>\n    <origin xyz=\"0 0.025 0\" rpy=\"0 0 0\"/>\n    <limit lower=\"-1.57\" upper=\"1.57\" effort=\"10\" velocity=\"3\"/>\n    <axis xyz=\"0 0 1\"/>\n    <dynamics damping=\"0.7\"/>\n</joint>\n```\n\n**Step 2: Define a Transmission for your joint in your URDF File**\n\n```xml\n<transmission name=\"tran4\">\n    <type>transmission_interface/SimpleTransmission</type>\n    <joint name=\"left_shoulder_forward_joint\">\n        <hardwareInterface>EffortJointInterface</hardwareInterface>\n    </joint>\n    <actuator name=\"motor4\">\n        <hardwareInterface>EffortJointInterface</hardwareInterface>\n        <mechanicalReduction>1</mechanicalReduction>\n    </actuator>\n</transmission>\n```\n\n**Step 3: Define the new transmission controller with the name xxx_position_controller (left_shoulder_forward_joint_position_controller) in a configuration yaml file**\n\n```yml\npi_robot:\n  # Publish all joint states -----------------------------------\n  joint_state_controller:\n    type: joint_state_controller/JointStateController\n    publish_rate: 50\n\n  left_shoulder_forward_joint_position_controller:\n    type: effort_controllers/JointPositionController\n    joint: left_shoulder_forward_joint\n    pid: { p: 100.0, i: 0.01, d: 10.0 }\n```\n\n**Step 4: Start everything through a launch file.**\n\n```xml\n<launch>\n\n  <!-- Load the URDF file in the param server variable robot_description if it wasn't loaded before -->\n  <param name=\"robot_description\" command=\"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" />\n<!-- Load joint controller configurations from YAML file to parameter server -->\n  <rosparam file=\"$(find pi_robot_pkg)/config/pirobot_control.yaml\" command=\"load\"/>\n\n  <node name=\"controller_spawner\"\n        pkg=\"controller_manager\"\n        type=\"spawner\"\n        respawn=\"false\"\n        output=\"screen\"\n        ns=\"/pi_robot\"\n        args=\"head_pan_joint_position_controller\n              head_tilt_joint_position_controller\n              torso_joint_position_controller\n              left_shoulder_forward_joint_position_controller\n              right_shoulder_forward_joint_position_controller\n              left_shoulder_up_joint_position_controller\n              right_shoulder_up_joint_position_controller\n              left_elbow_joint_position_controller\n              right_elbow_joint_position_controller\n              left_wrist_joint_position_controller\n              right_wrist_joint_position_controller\n              joint_state_controller\"/>\n\n<node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" type=\"robot_state_publisher\"\n    respawn=\"false\" output=\"screen\">\n    <remap from=\"/joint_states\" to=\"/pi_robot/joint_states\" />\n  </node>\n\n<!-- <node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" type=\"state_publisher\"/>-->\n\n\n</launch>\n```\n\n## Static Transforms\n\nThere are some cases where changing the URDF is not advisable or it simply makes no sense to add it to the robot model.urdf. These are the cases where publishing a static transform, especially through the launch file or commands, is more convenient.\n\n### Through Command Line\n\nThe following syntax can be used to publish a static transform via command line. `rosrun tf static_transform_publisher x y z yaw pitch roll frame_id child_frame_id period_in_ms`\n\n### Through Launch files\n\nThe following syntax can be used to publish a static transform via launch files.\n\n```xml\n<launch>\n    <node pkg=\"tf\" type=\"static_transform_publisher\" name=\"name_of_node\"\n          args=\"x y z yaw pitch roll frame_id child_frame_id period_in_ms\">\n    </node>\n</launch>\n```\n\n## Extra Content\n\n### Spawn a URDF Model in gazebo\n\nThis is an example of a launch file you could use to spawn URDF models into a Gazebo world:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<launch>\n\n    <arg name=\"x\" default=\"0.0\" />\n    <arg name=\"y\" default=\"0.0\" />\n    <arg name=\"z\" default=\"0.0\" />\n\n    <arg name=\"urdf_robot_file\" default=\"$(find your_pkg)/urdf/your_robot.urdf\" />\n    <arg name=\"robot_name\" default=\"your_robot_model_name\" />\n\n\n    <!-- Load the URDF into the ROS Parameter Server -->\n    <param name=\"robot_description\" command=\"cat $(arg urdf_robot_file)\" />\n\n    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->\n    <node name=\"urdf_spawner\" pkg=\"gazebo_ros\" type=\"spawn_model\" respawn=\"false\" output=\"screen\"\n    args=\"-urdf -x $(arg x) -y $(arg y) -z $(arg z)  -model $(arg robot_name) -param robot_description\"/>\n</launch>\n```\n\n### Delete a model from gazebo\n\n**To get a list of all the current models in gazebo:**\n\n`osservice call /gazebo/get_world_properties \"{}\"`\n\n**To delete a paticular model from the above list:**\n\n`rosservice call /gazebo/delete_model \"model_name: 'your_robot_model_name'\"`\n","code":"var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var o=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var t=n=>r(n,\"__esModule\",{value:!0});var j=(n,s)=>()=>(s||n((s={exports:{}}).exports,s),s.exports),N=(n,s)=>{t(n);for(var e in s)r(n,e,{get:s[e],enumerable:!0})},f=(n,s,e)=>{if(s&&typeof s==\"object\"||typeof s==\"function\")for(let l of m(s))!p.call(n,l)&&l!==\"default\"&&r(n,l,{get:()=>s[l],enumerable:!(e=o(s,l))||e.enumerable});return n},g=n=>f(t(r(n!=null?h(d(n)):{},\"default\",n&&n.__esModule&&\"default\"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var c=j((w,i)=>{i.exports=_jsx_runtime});var b={};N(b,{default:()=>_});var a=g(c());function u(n={}){let s=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",ol:\"ol\",li:\"li\",h3:\"h3\",p:\"p\",code:\"code\",pre:\"pre\",strong:\"strong\"},n.components),{wrapper:e}=s,l=(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.h2,{id:\"table-of-contents\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#table-of-contents\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Table of Contents\"]}),`\n`,(0,a.jsxs)(s.ol,{children:[`\n`,(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:\"#visulization-of-tf\",children:\"Visulization of TF\"}),`\n`,(0,a.jsxs)(s.ol,{children:[`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#view_frames\",children:\"View_frames\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#rqt_tf_tree\",children:\"rqt_tf_tree\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#using-echo-tf\",children:\"Using echo /tf\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#using-tf_echo\",children:\"Using tf_echo\"})}),`\n`]}),`\n`]}),`\n`,(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:\"#tf-publisher-broadcaster-listener-subscriber\",children:\"TF Publisher, Broadcaster, Listener, Subscriber\"}),`\n`,(0,a.jsxs)(s.ol,{children:[`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#tf-publisher\",children:\"TF Publisher\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#tf-broadcaster-example---1\",children:\"TF Broadcaster Example - 1\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#tf-broadcaster-example---2\",children:\"TF Broadcaster Example - 2\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#tf-broadcaster-from-pose-for-turtlesim_node\",children:\"TF Broadcaster from Pose for turtlesim_node\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#tf-listener\",children:\"TF Listener\"})}),`\n`]}),`\n`]}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#time-travel\",children:\"Time Travel\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#robot_state_publisher\",children:\"robot_state_publisher\"})}),`\n`,(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:\"#joint_state_publisher\",children:\"joint_state_publisher\"}),`\n`,(0,a.jsxs)(s.ol,{children:[`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#publish-them-directly\",children:\"Publish them directly\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#publish-them-through-hardwaresimulation\",children:\"Publish them through Hardware/Simulation\"})}),`\n`]}),`\n`]}),`\n`,(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:\"#static-transforms\",children:\"Static Transforms\"}),`\n`,(0,a.jsxs)(s.ol,{children:[`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#through-command-line\",children:\"Through Command Line\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#through-launch-files\",children:\"Through Launch files\"})}),`\n`]}),`\n`]}),`\n`,(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:\"#extra-content\",children:\"Extra Content\"}),`\n`,(0,a.jsxs)(s.ol,{children:[`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#spawn-a-urdf-model-in-gazebo\",children:\"Spawn a URDF Model in gazebo\"})}),`\n`,(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:\"#delete-a-model-from-gazebo\",children:\"Delete a model from gazebo\"})}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,a.jsxs)(s.h2,{id:\"visulization-of-tf\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#visulization-of-tf\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Visulization of TF\"]}),`\n`,(0,a.jsxs)(s.h3,{id:\"view_frames\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#view_frames\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"View_frames\"]}),`\n`,(0,a.jsx)(s.p,{children:\"The view_frames ROS node generates a diagram with the current TF tree of the system.\"}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:\"rosrun tf view_frames\"})}),`\n`,(0,a.jsxs)(s.h3,{id:\"rqt_tf_tree\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#rqt_tf_tree\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"rqt_tf_tree\"]}),`\n`,(0,a.jsx)(s.p,{children:\"rqt_tf_tree gives the same functionality as the view_frames, with an interesting extra: you can refresh and see changes without having to generate another PDF file each time.\"}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:\"rosrun rqt_tf_tree rqt_tf_tree\"})}),`\n`,(0,a.jsxs)(s.h3,{id:\"using-echo-tf\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#using-echo-tf\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Using echo /tf\"]}),`\n`,(0,a.jsx)(s.p,{children:\"There is a topic named /tf where all the TFs are published. The only problem is that ALL of them are published. In simple systems like this one, that isn't a problem; but in massive systems, the quantity of data can be overwhelming. Therefore, the tf package gives a handy tool that filters which transform you are interested in and just shows you that one.\"}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:\"rostopic echo -n1 /tf\"})}),`\n`,(0,a.jsxs)(s.h3,{id:\"using-tf_echo\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#using-tf_echo\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Using tf_echo\"]}),`\n`,(0,a.jsx)(s.p,{children:\"The /tf topic only publishes the direct TFs, not all the transforms between all the frames. tf_echo does return the transforms between any connected frames to you.\"}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:\"rosrun tf tf_echo [reference_frame] [target_frame]\"})}),`\n`,(0,a.jsxs)(s.h2,{id:\"tf-publisher-broadcaster-listener-subscriber\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#tf-publisher-broadcaster-listener-subscriber\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"TF Publisher, Broadcaster, Listener, Subscriber\"]}),`\n`,(0,a.jsxs)(s.h3,{id:\"tf-publisher\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#tf-publisher\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"TF Publisher\"]}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-python\",children:[(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"#!/usr/bin/env python\"}),`\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` rospy\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` tf2_ros\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"from\"}),\" tf2_msgs.msg \",(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` TFMessage\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"from\"}),\" geometry_msgs.msg \",(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` TransformStamped\n\n\nrospy.init_node(`,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'fixed_tf2_broadcaster'\"}),`)\n\npub_tf = rospy.Publisher(`,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"/tf\"'}),\",TFMessage, queue_size=\",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1\"}),`)\nmessage = TFMessage()\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"while\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"not\"}),` rospy.is_shutdown():\n     `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"# Run this loop at about 10Hz\"}),`\n    rospy.sleep(`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.1\"}),`)\n\n    t1 = TransformStamped()\n    t1.header.frame_id = `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtle1\"'}),`\n    t1.header.stamp = rospy.Time.now()\n    t1.child_frame_id = `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"carrot1\"'}),`\n    t1.transform.translation.x = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n    t1.transform.translation.y = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"2.0\"}),`\n    t1.transform.translation.z = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n\n    t1.transform.rotation.x = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n    t1.transform.rotation.y = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n    t1.transform.rotation.z = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n    t1.transform.rotation.w = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1.0\"}),`\n\n    t2 = TransformStamped()\n    t2.header.frame_id = `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtle1\"'}),`\n    t2.header.stamp = rospy.Time.now()\n    t2.child_frame_id = `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"carrot2\"'}),`\n    t2.transform.translation.x = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n    t2.transform.translation.y = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"4.0\"}),`\n    t2.transform.translation.z = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n\n    t2.transform.rotation.x = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n    t2.transform.rotation.y = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n    t2.transform.rotation.z = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`\n    t2.transform.rotation.w = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1.0\"}),`\n\n    message = [t1,t2]\n    pub_tf.publish(message)\n\nrospy.spin()\n`]})}),`\n`,(0,a.jsxs)(s.h3,{id:\"tf-broadcaster-example---1\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#tf-broadcaster-example---1\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"TF Broadcaster Example - 1\"]}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-python\",children:[(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"def\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-title hljs-function\",children:\"handle_turtle_pose\"}),\"(\",(0,a.jsx)(s.span,{className:\"hljs-params\",children:\"pose_msg, robot_name\"}),`):\n    br = tf2_ros.TransformBroadcaster()\n\n    br.sendTransform((pose_msg.position.x,pose_msg.position.y,pose_msg.position.z),\n                     (pose_msg.orientation.x,pose_msg.orientation.y,pose_msg.orientation.z,pose_msg.orientation.w),\n                     rospy.Time.now(),\n                     robot_name,\n                     `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"/world\"'}),`)\n`]})}),`\n`,(0,a.jsx)(s.p,{children:\"You have to publish each element of the position and orientation inside a parenthesis, otherwise it might not work.There is also a very important element, which is the rospy.Time.now(). This is because TF really depends on time to make everything work and be able to play with past messages. Then, state the name of the child-frame you want to assign that model (robot_name) and the parent-frame, which, in this case, is /world.\"}),`\n`,(0,a.jsxs)(s.h3,{id:\"tf-broadcaster-example---2\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#tf-broadcaster-example---2\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"TF Broadcaster Example - 2\"]}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-python\",children:[(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"#!/usr/bin/env python\"}),`\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` rospy\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` tf\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` math\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"if\"}),\" __name__ == \",(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'__main__'\"}),`:\n    rospy.init_node(`,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'my_moving_carrot_tf_broadcaster'\"}),`)\n    br = tf.TransformBroadcaster()\n    rate = rospy.Rate(`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"5.0\"}),`)\n    turning_speed_rate = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.1\"}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"while\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"not\"}),` rospy.is_shutdown():\n        t = (rospy.Time.now().to_sec() * math.pi)*turning_speed_rate\n        `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"# Map to only one turn maximum [0,2*pi)\"}),`\n        rad_var = t % (`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"2\"}),`*math.pi)\n        br.sendTransform((`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1.0\"}),\" * math.sin(rad_var), \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1.0\"}),\" * math.cos(rad_var), \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),`),\n                         (`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),\", \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),\", \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.0\"}),\", \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1.0\"}),`),\n                         rospy.Time.now(),\n                         `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"moving_carrot\"'}),`,\n                         `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtle2\"'}),`)\n        rate.sleep()\n`]})}),`\n`,(0,a.jsxs)(s.h3,{id:\"tf-broadcaster-from-pose-for-turtlesim_node\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#tf-broadcaster-from-pose-for-turtlesim_node\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"TF Broadcaster from Pose for turtlesim_node\"]}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:\"NOTE: Requires setting of ROS params in launch file as shown below\"})}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-xml\",children:[(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!--To get the Pose from turtle bot we have to launch turtlesim_node-->\"}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtlesim\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtlesim_node\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"sim\"'}),\"/>\"]}),`\n\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtle1_tf2_broadcaster\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"learning_tf2\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtle_tf2_broadcaster.py\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"respawn\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"false\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"output\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"screen\"'}),\" >\"]}),`\n        `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"param\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtle\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"string\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"value\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtle1\"'}),\" />\"]}),`\n\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\">\"]}),`\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n`]})}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-python\",children:[(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"#! /usr/bin/env python\"}),`\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` rospy\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"from\"}),\" geometry_msgs.msg \",(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` TransformStamped\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"from\"}),\" turtlesim.msg \",(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` Pose\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` tf_conversions\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` tf2_ros\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"def\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-title hljs-function\",children:\"callback_function\"}),\"(\",(0,a.jsx)(s.span,{className:\"hljs-params\",children:\"pose\"}),`):\n    `,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"global\"}),` turtlename\n    br = tf2_ros.TransformBroadcaster()\n    t = TransformStamped()\n\n    t.header.stamp = rospy.Time.now()\n    t.header.frame_id = `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'world'\"}),`\n    t.child_frame_id = turtlename\n    t.transform.translation.x = pose.x\n    t.transform.translation.y = pose.y\n    t.transform.translation.z = `,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0\"}),`\n\n    q = tf_conversions.transformations.quaternion_from_euler(`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0\"}),\",\",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0\"}),`,pose.theta)\n    t.transform.rotation.x = q[`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0\"}),`]\n    t.transform.rotation.y = q[`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1\"}),`]\n    t.transform.rotation.z = q[`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"2\"}),`]\n    t.transform.rotation.w = q[`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"3\"}),`]\n\n    br.sendTransform(t)\n\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"if\"}),\" __name__== \",(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'__main__'\"}),`:\n    rospy.init_node(`,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'tf2_broadcaster'\"}),`)\n    turtlename = rospy.get_param(`,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'~turtle'\"}),`)\n    rospy.Subscriber(`,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'/%s/pose'\"}),`% turtlename,Pose,callback_function)\n\n    rospy.spin()\n`]})}),`\n`,(0,a.jsxs)(s.h3,{id:\"tf-listener\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#tf-listener\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"TF Listener\"]}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-python\",children:[(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"#!/usr/bin/env python\"}),`\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` rospy\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` tf\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` math\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` tf2_ros\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"from\"}),\" geometry_msgs.msg \",(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"import\"}),` Twist\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"if\"}),\" __name__ == \",(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'__main__'\"}),`:\n    rospy.init_node(`,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'tf2_turtle_listener'\"}),`)\n\n    tfBuffer = tf2_ros.Buffer()\n    tf2_ros.TransformListener(tfBuffer)\n\n    turtle_name = `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"turtle2\"'}),`\n\n    rate = rospy.Rate(`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"10.0\"}),`)\n    `,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"while\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"not\"}),` rospy.is_shutdown():\n        `,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"try\"}),`:\n            trans = tfBuffer.lookup_transform(turtle_name, `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'turtle1'\"}),`, rospy.Time())\n            `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"#print(trans)\"}),`\n        `,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"except\"}),` (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):\n            rate.sleep()\n            `,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"continue\"}),`\n\n        `,(0,a.jsx)(s.span,{className:\"hljs-built_in\",children:\"print\"}),`(trans)\n        rate.sleep()\n`]})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsxs)(s.strong,{children:[\"NOTE: Using \",(0,a.jsx)(s.code,{children:\"rospy.Time.now()\"}),\" in lookup_transform can cause errors. \",(0,a.jsx)(s.code,{children:\"rospy.Time.now()\"}),\" > will ask for the frame with the current time, which might always not be avaiable immdeaditly. \",(0,a.jsx)(s.code,{children:\"rospy.Time()\"}),\" > will ask for the latest frame that is available. To tackle this a time out argument can be given to the lookup_transform,\"]})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:\"trans = tfBuffer.lookup_transform(turtle_name, 'turtle1', rospy.Time.now(),rospy.Duration(1.0))\"})}),`\n`,(0,a.jsxs)(s.h2,{id:\"time-travel\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#time-travel\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Time Travel\"]}),`\n`,(0,a.jsx)(s.p,{children:\"To get the tranform between two objects from the past the following can be used.\"}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-python\",children:[(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"try\"}),`:\n    past = rospy.Time.now() - rospy.Duration(`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"5.0\"}),`)\n    trans = tfBuffer.lookup_transform(turtle_name, `,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'carrot1'\"}),\", past, rospy.Duration(\",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1.0\"}),`))\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"except\"}),` (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):\n`]})}),`\n`,(0,a.jsx)(s.p,{children:\"To get transforms between objects from different timelines the following can be used.\"}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-python\",children:[(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"try\"}),`:\n    past = rospy.Time.now() - rospy.Duration(`,(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"5.0\"}),`)\n    trans = tfBuffer.lookup_transform_full(target_frame=turtle_name,target_time=rospy.Time.now(), source_frame=`,(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'carrot1'\"}),\",source_time=past,fixed_frame=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"'world'\"}),\",timeout=rospy.Duration(\",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"1.0\"}),`))\n\n`,(0,a.jsx)(s.span,{className:\"hljs-keyword\",children:\"except\"}),`(tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):\n`]})}),`\n`,(0,a.jsxs)(s.h2,{id:\"robot_state_publisher\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#robot_state_publisher\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"robot_state_publisher\"]}),`\n`,(0,a.jsx)(s.p,{children:\"Publishing all the TF's manually is very tedious and hence ROS provides nice tool called robot state publisher to automate the task for you. In essence, it takes a file describing the morphology of the robot (aka URDF file) as input and it automatically publishes the TF for you.\"}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-xml\",children:[(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n\n  `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- Load the URDF file in the param server variable robot_description if it wasn't loaded before -->\"}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"param\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_description\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"command\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\"'}),\"/>\"]}),`\n\n  `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- Publish TF with robot_state_publisher -->\"}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_state_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_state_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_state_publisher\"'}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"respawn\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"false\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"output\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"screen\"'}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"remap\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"from\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"/joint_states\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"to\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"/pi_robot/joint_states\"'}),\" />\"]}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\">\"]}),`\n\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n`]})}),`\n`,(0,a.jsxs)(s.h2,{id:\"joint_state_publisher\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#joint_state_publisher\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"joint_state_publisher\"]}),`\n`,(0,a.jsx)(s.p,{children:\"There are two ways to publish non-fixed joint frames\"}),`\n`,(0,a.jsxs)(s.h3,{id:\"publish-them-directly\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#publish-them-directly\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Publish them directly\"]}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-xml\",children:[(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"param\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_description\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"command\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\"'}),\" />\"]}),`\n\n  `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- send fake joint values -->\"}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"joint_state_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"joint_state_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"joint_state_publisher\"'}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"param\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"use_gui\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"value\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"TRUE\"'}),\"/>\"]}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\">\"]}),`\n\n  `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- Combine joint values -->\"}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_state_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_state_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"state_publisher\"'}),\"/>\"]}),`\n\n  `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- Show in RVIZ   -->\"}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"rviz\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"rviz\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"rviz\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"args\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\"'}),\"/>\"]}),`\n\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n`]})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:\"NOTE: This only works in RVIZ, meaning the robot in gazebo won't be effected by the joint state values.\"})}),`\n`,(0,a.jsxs)(s.h3,{id:\"publish-them-through-hardwaresimulation\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#publish-them-through-hardwaresimulation\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Publish them through Hardware/Simulation\"]}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:\"Step 1: Define a joint that isn't fixed in your URDF File\"})}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-xml\",children:[(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"joint\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"left_shoulder_forward_joint\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"revolute\"'}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"parent\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"link\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"left_shoulder_link\"'}),\"/>\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"child\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"link\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"left_shoulder_forward_link\"'}),\"/>\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"origin\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"xyz\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"0 0.025 0\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"rpy\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"0 0 0\"'}),\"/>\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"limit\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"lower\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"-1.57\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"upper\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"1.57\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"effort\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"10\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"velocity\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"3\"'}),\"/>\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"axis\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"xyz\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"0 0 1\"'}),\"/>\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"dynamics\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"damping\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"0.7\"'}),\"/>\"]}),`\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"joint\"}),\">\"]}),`\n`]})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:\"Step 2: Define a Transmission for your joint in your URDF File\"})}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-xml\",children:[(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"transmission\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"tran4\"'}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"type\"}),\">\"]}),\"transmission_interface/SimpleTransmission\",(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"type\"}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"joint\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"left_shoulder_forward_joint\"'}),\">\"]}),`\n        `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"hardwareInterface\"}),\">\"]}),\"EffortJointInterface\",(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"hardwareInterface\"}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"joint\"}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"actuator\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"motor4\"'}),\">\"]}),`\n        `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"hardwareInterface\"}),\">\"]}),\"EffortJointInterface\",(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"hardwareInterface\"}),\">\"]}),`\n        `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"mechanicalReduction\"}),\">\"]}),\"1\",(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"mechanicalReduction\"}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"actuator\"}),\">\"]}),`\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"transmission\"}),\">\"]}),`\n`]})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:\"Step 3: Define the new transmission controller with the name xxx_position_controller (left_shoulder_forward_joint_position_controller) in a configuration yaml file\"})}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-yml\",children:[(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pi_robot:\"}),`\n  `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"# Publish all joint states -----------------------------------\"}),`\n  `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"joint_state_controller:\"}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type:\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"joint_state_controller/JointStateController\"}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"publish_rate:\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"50\"}),`\n\n  `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"left_shoulder_forward_joint_position_controller:\"}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type:\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"effort_controllers/JointPositionController\"}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"joint:\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-string\",children:\"left_shoulder_forward_joint\"}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pid:\"}),\" { \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"p:\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"100.0\"}),\", \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"i:\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"0.01\"}),\", \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"d:\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-number\",children:\"10.0\"}),` }\n`]})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:\"Step 4: Start everything through a launch file.\"})}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-xml\",children:[(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n\n  `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- Load the URDF file in the param server variable robot_description if it wasn't loaded before -->\"}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"param\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_description\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"command\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\"'}),\" />\"]}),`\n`,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- Load joint controller configurations from YAML file to parameter server -->\"}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"rosparam\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"file\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"$(find pi_robot_pkg)/config/pirobot_control.yaml\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"command\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"load\"'}),\"/>\"]}),`\n\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"controller_spawner\"'}),`\n        `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"controller_manager\"'}),`\n        `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"spawner\"'}),`\n        `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"respawn\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"false\"'}),`\n        `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"output\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"screen\"'}),`\n        `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"ns\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"/pi_robot\"'}),`\n        `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"args\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:`\"head_pan_joint_position_controller\n              head_tilt_joint_position_controller\n              torso_joint_position_controller\n              left_shoulder_forward_joint_position_controller\n              right_shoulder_forward_joint_position_controller\n              left_shoulder_up_joint_position_controller\n              right_shoulder_up_joint_position_controller\n              left_elbow_joint_position_controller\n              right_elbow_joint_position_controller\n              left_wrist_joint_position_controller\n              right_wrist_joint_position_controller\n              joint_state_controller\"`}),\"/>\"]}),`\n\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_state_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_state_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_state_publisher\"'}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"respawn\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"false\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"output\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"screen\"'}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"remap\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"from\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"/joint_states\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"to\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"/pi_robot/joint_states\"'}),\" />\"]}),`\n  `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\">\"]}),`\n\n`,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:'<!-- <node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" type=\"state_publisher\"/>-->'}),`\n\n\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n`]})}),`\n`,(0,a.jsxs)(s.h2,{id:\"static-transforms\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#static-transforms\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Static Transforms\"]}),`\n`,(0,a.jsx)(s.p,{children:\"There are some cases where changing the URDF is not advisable or it simply makes no sense to add it to the robot model.urdf. These are the cases where publishing a static transform, especially through the launch file or commands, is more convenient.\"}),`\n`,(0,a.jsxs)(s.h3,{id:\"through-command-line\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#through-command-line\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Through Command Line\"]}),`\n`,(0,a.jsxs)(s.p,{children:[\"The following syntax can be used to publish a static transform via command line. \",(0,a.jsx)(s.code,{children:\"rosrun tf static_transform_publisher x y z yaw pitch roll frame_id child_frame_id period_in_ms\"})]}),`\n`,(0,a.jsxs)(s.h3,{id:\"through-launch-files\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#through-launch-files\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Through Launch files\"]}),`\n`,(0,a.jsx)(s.p,{children:\"The following syntax can be used to publish a static transform via launch files.\"}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-xml\",children:[(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"tf\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"static_transform_publisher\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"name_of_node\"'}),`\n          `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"args\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"x y z yaw pitch roll frame_id child_frame_id period_in_ms\"'}),\">\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\">\"]}),`\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n`]})}),`\n`,(0,a.jsxs)(s.h2,{id:\"extra-content\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#extra-content\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Extra Content\"]}),`\n`,(0,a.jsxs)(s.h3,{id:\"spawn-a-urdf-model-in-gazebo\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#spawn-a-urdf-model-in-gazebo\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Spawn a URDF Model in gazebo\"]}),`\n`,(0,a.jsx)(s.p,{children:\"This is an example of a launch file you could use to spawn URDF models into a Gazebo world:\"}),`\n`,(0,a.jsx)(s.pre,{children:(0,a.jsxs)(s.code,{className:\"hljs language-xml\",children:[(0,a.jsx)(s.span,{className:\"hljs-meta\",children:'<?xml version=\"1.0\" encoding=\"UTF-8\"?>'}),`\n\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"arg\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"x\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"default\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"0.0\"'}),\" />\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"arg\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"y\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"default\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"0.0\"'}),\" />\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"arg\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"z\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"default\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"0.0\"'}),\" />\"]}),`\n\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"arg\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"urdf_robot_file\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"default\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"$(find your_pkg)/urdf/your_robot.urdf\"'}),\" />\"]}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"arg\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_name\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"default\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"your_robot_model_name\"'}),\" />\"]}),`\n\n\n    `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- Load the URDF into the ROS Parameter Server -->\"}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"param\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"robot_description\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"command\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"cat $(arg urdf_robot_file)\"'}),\" />\"]}),`\n\n    `,(0,a.jsx)(s.span,{className:\"hljs-comment\",children:\"<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->\"}),`\n    `,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"<\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"node\"}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"name\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"urdf_spawner\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"pkg\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"gazebo_ros\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"type\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"spawn_model\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"respawn\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"false\"'}),\" \",(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"output\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"screen\"'}),`\n    `,(0,a.jsx)(s.span,{className:\"hljs-attr\",children:\"args\"}),\"=\",(0,a.jsx)(s.span,{className:\"hljs-string\",children:'\"-urdf -x $(arg x) -y $(arg y) -z $(arg z)  -model $(arg robot_name) -param robot_description\"'}),\"/>\"]}),`\n`,(0,a.jsxs)(s.span,{className:\"hljs-tag\",children:[\"</\",(0,a.jsx)(s.span,{className:\"hljs-name\",children:\"launch\"}),\">\"]}),`\n`]})}),`\n`,(0,a.jsxs)(s.h3,{id:\"delete-a-model-from-gazebo\",children:[(0,a.jsx)(s.a,{className:\"anchor\",href:\"#delete-a-model-from-gazebo\",children:(0,a.jsx)(s.span,{className:\"icon icon-link\"})}),\"Delete a model from gazebo\"]}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:\"To get a list of all the current models in gazebo:\"})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:'osservice call /gazebo/get_world_properties \"{}\"'})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:\"To delete a paticular model from the above list:\"})}),`\n`,(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:`rosservice call /gazebo/delete_model \"model_name: 'your_robot_model_name'\"`})})]});return e?(0,a.jsx)(e,Object.assign({},n,{children:l})):l}var _=u;return b;})();\n;return Component.default;"},"_id":"blog/ros-tf101.mdx","_raw":{"sourceFilePath":"blog/ros-tf101.mdx","sourceFileName":"ros-tf101.mdx","sourceFileDir":"blog","bodyType":"mdx","flattenedPath":"blog/ros-tf101"},"type":"Blog","readingTime":{"text":"9 min read","minutes":8.065,"time":483900,"words":1613},"slug":"ros-tf101"}]},"__N_SSG":true}